name: üöÄ Kedro Training Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: üß™ Linting & Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install black flake8

    - name: Code formatting check
      run: black --check src/
      
    - name: Linting
      run: flake8 src/ --max-line-length=88 --ignore=E203,W503

  test-pipeline-execution:
    name: üß™ Test Pipeline Execution
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image for testing
      run: docker build -t mnist-kedro-ci-test .
      
    - name: Run Kedro pipeline
      run: docker run --rm mnist-kedro-ci-test

  build-and-push:
    name: üê≥ Build & Push Production Image
    runs-on: ubuntu-latest
    needs: [test-pipeline-execution]
    # Only run on push events to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable=true
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  run-production-training:
    name: üöÄ Run Production Training & Create Artifact
    runs-on: ubuntu-latest
    needs: build-and-push
    # This job only runs on push to main, dependency ensures this
    steps:
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create artifacts directory
      run: mkdir -p model_artifact

    - name: Run production training pipeline
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/model_artifact:/home/kedro_docker/data/06_models \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Upload model artifact
      uses: actions/upload-artifact@v4
      with:
        name: trained-model-convnet
        path: model_artifact/convnet.pt

  notify-deployment:
    name: ‚úÖ Notify Model Ready for Deployment
    runs-on: ubuntu-latest
    needs: run-production-training
    steps:
    - name: 'Notify that a new model is ready'
      run: |
        echo "‚úÖ A new production model 'convnet.pt' has been trained and is available as a workflow artifact."
        echo "The next step would be for the 'mnist-deployment' project to fetch this model and deploy the serving API." 